class Solution{
    public void middleOfLL(ListNode head){
        ListNode first=head;
        ListNode second=head;
        while(first!=null && first.next!=null){
            second=second.next;
            first=first.next.next;
        }
        return second;
    }
}
//TL-O(N) SL-O(1) When traversing the list with a pointer slow, 
//make another pointer fast that traverses twice as fast. 
//When fast reaches the end of the list, slow must be in the middle.
---------------------------------------------------------------------------------------
Given the head of a singly linked list, return the middle node of the linked list.
If there are two middle nodes, return the second middle node.

Example 1:
Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.

Example 2:
Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.